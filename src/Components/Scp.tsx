/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 scp.glb 
*/

import { useRef, useEffect } from 'react'
import { useGLTF, useAnimations, PositionalAudio } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import * as THREE from "three";
export function Scp() {
  const group = useRef<any>()
  const { nodes, materials, animations }:any = useGLTF('/scp.glb')
  const { actions, names, mixer } = useAnimations(animations, group)
  const {camera} = useThree()
  useEffect(()=>{
    actions[names[0]]?.reset().fadeIn(0.5).play()
    mixer.timeScale = 2
    return()=>{
      actions[names[0]]?.fadeOut(0.5)
    }
   }, [])

   const listener = new THREE.AudioListener();
   useFrame(()=>{
    if(group.current){
      const direction = camera.position.clone().sub(group.current.position)

    // Normalize the direction vector to ensure constant speed
    direction.setY(0)
    direction.normalize()

    // Update the position of the group based on the direction vector
    group.current.position.add(direction.multiplyScalar(0.08))
    group.current.lookAt(camera.position.x, 0, camera.position.z)
    }
    
   })

  return (
    <group ref={group} dispose={null} position={[-4.5,0,0]} scale={50}>
      <PositionalAudio autoplay url='./Sounds/scp-sounds.mp3' listener={listener}/>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh castShadow name="Object_0" geometry={nodes.Object_0.geometry} material={materials['Material.001']} skeleton={nodes.Object_0.skeleton} />
          <skinnedMesh castShadow name="Object_1" geometry={nodes.Object_1.geometry} material={materials['Material.001']} skeleton={nodes.Object_1.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/scp.glb')
