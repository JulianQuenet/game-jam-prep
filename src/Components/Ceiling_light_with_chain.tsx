/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.14 ceiling_light_with_chain.glb 
Author: rhcreations (https://sketchfab.com/rhcreations)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/ceiling-light-with-chain-7467af164bd64d0db09565b70b216e12
Title: Ceiling Light with Chain
*/

import { useRef } from 'react'
import { Box, useGLTF } from '@react-three/drei'
import {  useFrame } from "@react-three/fiber";
import { light } from '@mui/material/styles/createPalette';

export function CeilingLight() {
  const { nodes, materials }:any = useGLTF('/ceiling_light_with_chain.glb')
  const ceilingLampRef = useRef<any>()
  const light1 = useRef<any>()
  const light2 = useRef<any>()
  const light3 = useRef<any>()

  useFrame(()=>{
   const time = Date.now() * 0.0005

   if(ceilingLampRef.current && light1.current){
    ceilingLampRef.current.rotation.z = 0 + Math.sin(time * 1.7) * 0.075
   //Main
   ceilingLampRef.current.add(light1.current)
   ceilingLampRef.current.add(light1.current.target)
   light1.current.intensity = 45
   light1.current.angle = 0.75
   light1.current.penumbra = 0.25
   //Ambient
   ceilingLampRef.current.add(light2.current)
   ceilingLampRef.current.add(light2.current.target)
   light2.current.intensity = 20
   light2.current.angle = 1.55
   light2.current.penumbra = 0.30
   //Backflash
   light3.current.position.x = 1 + Math.sin(time * 1.7) * 0.25
   }
   

  })





  return (
    <>
   <spotLight name='main' ref={light1} />
   <spotLight name='ambient' ref={light2}/>
   <spotLight intensity={10} angle={1.2} penumbra={0.8} decay={2.2} target={light3.current} name='backflash' />

    <Box position={[1,9,0]} ref={light3}>
     <meshStandardMaterial color="red"/>
     </Box>

    <group dispose={null} position={[1,7,-0.05]}  scale={0.135} ref={ceilingLampRef}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group scale={[3.471, 3.471, 3.205]}>
          <group position={[0, 0, -2.098]} rotation={[-Math.PI, 0, 0]} scale={[0.17, 0.17, 0.184]} >
            <mesh  geometry={nodes.Light_Bulb_0.geometry} material={materials['Metal_Material.001']} />
            <mesh geometry={nodes.Light_Bulb_1.geometry} material={materials.Emmision_Material} />
            <mesh geometry={nodes.Light_Bulb_2.geometry} material={materials.Light_Bulb_Glass_Material} />
          </group>
          <mesh geometry={nodes.Ceiling_Light_0.geometry} material={materials.Plastic_Material} />
          <mesh geometry={nodes.Ceiling_Light_1.geometry} material={materials.Metal_Material} />
        </group>
      </group>
    </group>
    </>
  )
}

useGLTF.preload('/ceiling_light_with_chain.glb')


// Will use this function later for interactions in other component, currentlty testing
  // function onHover(){
  //   if(ref.current){
  //     const position = ref.current.position
  //     const distance = position.distanceTo(camera.position)
  //     console.log(distance)
  //   }
  // }

 